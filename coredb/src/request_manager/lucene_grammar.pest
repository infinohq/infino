// This code is licensed under Elastic License 2.0
// https://www.elastic.co/licensing/elastic-license

/// PEG grammar for Lucene Query Syntax

query             =  { or_query }
or_query          =  { and_query ~ (ws ~ ("OR" | "||") ~ ws ~ query)? | and_query }
and_query         =  { not_query ~ (ws ~ ("AND" | "&&") ~ ws ~ query)? | not_query }
not_query         =  { "NOT" ~ ws ~ query | modified_term }
modified_term     =  { ("+" | "-")? ~ primary }
primary           =  { "(" ~ ws ~ query ~ ws ~ ")" ~ boost? | dismax | field_group | term }
dismax            =  { "dismax" ~ "{" ~ ws ~ query ~ ws ~ "}" ~ boost? }
field_group       =  { complex_fieldname ~ ":" ~ "(" ~ ws ~ query ~ ws ~ ")" ~ boost? }
term              =  { complex_fieldname ~ ":" ~ ws ~ term_value | term_value }
term_value        =  { proximity | extended_range | fuzzy | wildcard | regex | sloppy_phrase | function_boost | boosted_word | word | quoted_string | escaped_char }
proximity         =  { "\"" ~ word ~ "+" ~ "~" ~ digits ~ "\"" }
extended_range    =  { "[" ~ term_value ~ "TO" ~ term_value ~ "]" | "{" ~ term_value ~ "TO" ~ term_value ~ "}" | ("<" | "<=" | ">" | ">=") ~ term_value }
fuzzy             =  { word ~ "~" ~ (digits ~ ("." ~ digits)?)? }
wildcard          =  { any_char* ~ ("*" | "?") ~ any_char* }
regex             =  { "/" ~ any_char* ~ "/" }
sloppy_phrase     =  { "\"" ~ any_char* ~ "\"" ~ "~" ~ digits }
function_boost    =  { "{" ~ any_char+ ~ "}" ~ boost }
boosted_word      =  { word ~ boost }
word              = @{ alpha_num_char+ }
quoted_string     =  { "\"" ~ any_char* ~ "\"" ~ boost? }
escaped_char      =  { "\\" ~ ANY }
complex_fieldname = @{ alpha_num_char+ | "\"" ~ any_char+ ~ "\"" }
boost             =  { "^" ~ digits }
fieldname         = @{ alpha_num_char+ }
ws                = _{ " " | "\t" | "\n" | "\r" }
digits            = @{ ASCII_DIGIT+ }
alpha_num_char    = _{ ASCII_ALPHANUMERIC | "_" }
any_char          = _{ ANY }
